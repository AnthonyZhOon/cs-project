datasource db {
  provider  = "postgres"
  url       = env("NEON_POSTGRES_PRISMA_URL")
  directUrl = env("NEON_DATABASE_URL_UNPOOLED")
}

/**
 * Error:
 * Cannot read properties of undefined (reading 'type')
 */
// generator dbml {
//   provider = "prisma-dbml-generator"
// }

generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["strictUndefinedChecks"]
}

model User {
  id    String @id @default(cuid(2))
  email String @unique
  name  String

  assignedTasks    Task[]
  attendingEvents  Event[]
  ownedWorkspaces  Workspace[]
  workspaceMembers WorkspaceMember[]
}

model Task {
  id          String              @id @default(cuid(2))
  title       String
  description String?
  visibility  WorkspaceMemberRole @default(MEMBER)
  status      TaskStatus          @default(TODO)
  deadline    DateTime?
  priority    Priority?
  tags        Tag[]

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  assignees User[]

  dependencies Task[] @relation("TaskDependency")
  parents      Task[] @relation("TaskDependency")
}

model Event {
  id          String              @id @default(cuid(2))
  title       String
  description String?
  visibility  WorkspaceMemberRole @default(MEMBER)
  start       DateTime
  end         DateTime
  tags        Tag[]

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  attendees User[]
}

model Tag {
  name   String  @id
  tasks  Task[]
  events Event[]
}

model Workspace {
  id   String @id @default(cuid(2))
  name String

  ownerId String
  owner   User              @relation(fields: [ownerId], references: [id])
  members WorkspaceMember[]

  tasks   Task[]
  events  Event[]
  invites WorkspaceInvite[]
}

model WorkspaceMember {
  userId      String
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  role        WorkspaceMemberRole

  @@id([userId, workspaceId])
}

model WorkspaceInvite {
  email       String
  workspaceId String
  workspace   Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  memberRole  WorkspaceMemberRole

  @@unique([email, workspaceId])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETE
}

enum WorkspaceMemberRole {
  MANAGER
  MEMBER
}
