name: Deploy PR to Preview Environment

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
  NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
  DB_USER: "prisma_user"
  NODE_VERSION: 18
  PNPM_VERSION: 10

jobs:
  setup-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      - name: Install dependencies
        run: pnpm install
      
      - name: Install Vercel CLI
        run: pnpm add --global vercel@latest
      
      - name: Get branch name
        id: branch-name
        run: |
          BRANCH_NAME=$(echo ${{ github.head_ref }} | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Branch name for database: $BRANCH_NAME"
          
      - name: Install Neon CLI
        run: |
          pnpm i -g neonctl

      - name: Check if branch exists on Neon
        id: check-branch
        run: |
          BRANCH_EXISTS=$(neonctl branches list --project-id ${{ env.NEON_PROJECT_ID }} --api-key ${{ env.NEON_API_KEY }} --output json | jq -r '.[] | select(.name=="${{ steps.branch-name.outputs.branch_name }}") | .id')
          if [ -n "$BRANCH_EXISTS" ]; then
            echo "Branch exists, will reset it"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
            echo "branch_id=$BRANCH_EXISTS" >> $GITHUB_OUTPUT
          else
            echo "Branch does not exist, will create it"
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create new database branch
        if: steps.check-branch.outputs.branch_exists == 'false'
        id: create-branch
        run: |
          RESULT=$(neonctl branches create --project-id ${{ env.NEON_PROJECT_ID }} --api-key ${{ env.NEON_API_KEY }} --name ${{ steps.branch-name.outputs.branch_name }} --output json)
          BRANCH_ID=$(echo $RESULT | jq -r '.id')
          echo "$RESULT"
          echo "branch_id=$BRANCH_ID" >> $GITHUB_OUTPUT
          echo "Created new branch with ID: $BRANCH_ID"

      - name: Reset database branch
        if: steps.check-branch.outputs.branch_exists == 'true'
        run: |
          neonctl branches reset ${{ steps.check-branch.outputs.branch_id }} --parent --project-id ${{ env.NEON_PROJECT_ID }} --api-key ${{ env.NEON_API_KEY }} 

      - name: Create database user
        id: create-user
        run: |
          BRANCH_ID=${{ steps.check-branch.outputs.branch_id || steps.create-branch.outputs.branch_id }}
          
          # Create database user or update existing one
          neonctl roles create --name ${{ env.DB_USER }} --project-id ${{ env.NEON_PROJECT_ID }} --api-key ${{ env.NEON_API_KEY }} --branch $BRANCH_ID --output json 2>/dev/null
          
          # Get connection string
          POOLED_STRING=$(neonctl connection-string --role-name ${{ env.DB_USER }} --pooled --project-id ${{ env.NEON_PROJECT_ID }} --api-key ${{ env.NEON_API_KEY }} --branch $BRANCH_ID)
          DIRECT_STRING=$(neonctl connection-string --role-name ${{ env.DB_USER }} --project-id ${{ env.NEON_PROJECT_ID }} --api-key ${{ env.NEON_API_KEY }} --branch $BRANCH_ID)
          
          # Set outputs
          echo "::add-mask::$POOLED_STRING"
          echo "::add-mask::$DIRECT_STRING"
          echo "pooled_string=$POOLED_STRING" >> $GITHUB_OUTPUT
          echo "direct_string=$DIRECT_STRING" >> $GITHUB_OUTPUT

      - name: Run Prisma migrations
        run: |
          export DATABASE_URL="${{ steps.create-user.outputs.pooled_string }}"
          pnpm exec prisma migrate deploy

      - name: Run Prisma seed (optional)
        run: |
          export DATABASE_URL="${{ steps.create-user.outputs.pooled_string }}"
          pnpm exec prisma db seed
        continue-on-error: true

      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          vercel pull --yes --environment=preview --token=${{ env.VERCEL_TOKEN }}
          vercel build --token=${{ env.VERCEL_TOKEN }}
          vercel deploy --prebuilt --token=${{ env.VERCEL_TOKEN }} \
            --env DATABASE_URL="${{ steps.create-user.outputs.pooled_string }}" \
            --env DIRECT_URL="${{ steps.create-user.outputs.direct_string }}"

      - name: Comment PR with deployment URL
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const deploymentUrl = fs.readFileSync('.vercel/output/config.json', 'utf8');
            const url = JSON.parse(deploymentUrl).url;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Preview deployment is ready! Visit: https://${url}`
            });
